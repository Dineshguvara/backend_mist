// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------------------------------------------
//   00. ENUM FOR REUSE
// ------------------------------------------------------------------

enum AdminType {
  SECRETARY
  CORRESPONDENT
}

enum PrincipalType {
  PRINCIPAL
  VICE_PRINCIPAL
}

enum StaffType {
  OFFICE_STAFF
  SWEEPING_STAFF
  CLASS_ROOM_STAFF
}

enum OtpPurpose {
  REGISTRATION
  PASSWORD_RESET
  FORGET_PASSWORD
}

// ------------------------------------------------------------------
//   01.  SUPER ADMIN MODEL 
// ------------------------------------------------------------------
model SuperAdmin {
  id     Int      @id @default(autoincrement())
  name   String
  userId Int      @unique
  school School[] // A SuperAdmin can have multiple Schools

  user User @relation(fields: [userId], references: [id])
}

// ------------------------------------------------------------------
//   02.  ROLE MODEL 
// ------------------------------------------------------------------
model Role {
  id            Int    @id @default(autoincrement())
  name          String @unique
  createdBy     Int? // Optional field
  createdByUser User?  @relation("CreatedRoles", fields: [createdBy], references: [id], onDelete: Cascade)

  users User[] @relation("AssignedRoles")
}

// ------------------------------------------------------------------
//   03.  USER MODEL 
// ------------------------------------------------------------------
model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  password       String
  roleId         Int
  schoolId       Int? // Nullable for SuperAdmins or users without a specific school
  role           Role     @relation("AssignedRoles", fields: [roleId], references: [id])
  school         School?  @relation("AssignedSchools", fields: [schoolId], references: [id])
  createdRoles   Role[]   @relation("CreatedRoles")
  approvalStatus String   @default("PENDING") // "PENDING", "APPROVED", "REJECTED"
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  superAdmin    SuperAdmin?
  admin         Admin?
  principal     Principal?
  staff         Staff?
  student       Student?
  refreshTokens RefreshToken[]
}

// ------------------------------------------------------------------
//   04.   REFRESH TOKEN  
// ------------------------------------------------------------------

model RefreshToken {
  id             Int      @id @default(autoincrement())
  userId         Int
  refreshTokenId String
  createdAt      DateTime @default(now())
  expiresAt      DateTime
  user           User     @relation(fields: [userId], references: [id])
}

// ------------------------------------------------------------------
//   05.  OTP MODEL (validate email id)
// ------------------------------------------------------------------

model otp {
  id        String     @id @default(cuid()) // Unique identifier for each OTP
  email     String // Email address associated with the OTP
  otp       String // The OTP itself
  purpose   OtpPurpose // Enum to specify the purpose of the OTP
  createdAt DateTime   @default(now()) // Timestamp when the OTP was generated
  expiresAt DateTime // Expiration timestamp
  isUsed    Boolean    @default(false) // Whether the OTP has been used
}

// ------------------------------------------------------------------
//   06.   SCHOOL MODEL 
// ------------------------------------------------------------------
model School {
  id        Int      @id @default(autoincrement())
  name      String
  address   String?
  imageUrl  String?
  createdBy Int
  createdAt DateTime @default(now())

  superAdmin SuperAdmin? @relation(fields: [createdBy], references: [id], map: "School_SuperAdmin_fkey")
  users      User[]      @relation("AssignedSchools")
}

// ------------------------------------------------------------------
//   07.   SCHOOL MODEL 
// ------------------------------------------------------------------
model DummyData {
  id        Int      @id @default(autoincrement())
  name      String
  age       Int
  email     String   @unique
  createdAt DateTime @default(now())
}

// ------------------------------------------------------------------
//   08.   ADMIN MODEL FOR ONE SCHOOL 
// ------------------------------------------------------------------
model Admin {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int    @unique

  user User @relation(fields: [userId], references: [id]) // Reverse relation
}

// ------------------------------------------------------------------
//   09.   PRINCIPAL INFO MODEL  
// ------------------------------------------------------------------
model Principal {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int    @unique

  user User @relation(fields: [userId], references: [id]) // Reverse relation
}

// ------------------------------------------------------------------
//   10.   STAFF INFO MODEL 
// ------------------------------------------------------------------
model Staff {
  id     Int        @id @default(autoincrement())
  name   String
  userId Int        @unique
  type   StaffType? // Enum to distinguish staff roles

  user User @relation(fields: [userId], references: [id]) // Reverse relation
}

// ------------------------------------------------------------------
//   11.   STUDENT INFO MODEL 
// ------------------------------------------------------------------
model Student {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int    @unique

  user User @relation(fields: [userId], references: [id]) // Reverse relation
}
